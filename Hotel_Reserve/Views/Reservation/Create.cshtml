@model Hotel_Reserve.Models.Reservation

@{
    ViewBag.Title = "Reservations";
}

<br />
<br />

        @using (Html.BeginForm("Create", "Reservation", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Reservation</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.CheckInDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CheckInDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CheckInDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CheckOutDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CheckOutDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CheckOutDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-sm-2 control-label">Number of Guests</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.NumberOfGuest, ViewBag.Numbers as List<SelectListItem>, "No. of Rooms", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NumberOfGuest, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-sm-2 control-label">Number of Rooms</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.NumberOfRoom, ViewBag.Numbers as List<SelectListItem>, "No. of Guests", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NumberOfRoom, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        <button type="reset" class="btn btn-info">Clear</button>
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Back","Index",new { id = Session["id"] })
        </div>
    
  

   
@section Scripts {


 <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {
            var dateFormat = "mm/dd/yy",
                from = $("#CheckInDate")
                    .datepicker({
                        defaultDate: "+1w",
                        changeMonth: true,
                        numberOfMonths: 3,
                        minDate: 0
                    })
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#CheckOutDate").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                    numberOfMonths: 3,
                })
                    .on("change", function () {
                        from.datepicker("option", "maxDate", getDate1(this));
                    });

            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                    date.setDate(date.getDate() + 1)
                } catch (error) {
                    date = null;
                }

                return date;
            }

            function getDate1(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }

                return date;
            }
        });

     

    </script>

}  